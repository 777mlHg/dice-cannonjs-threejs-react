{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["diceProperty","BoundPlanes","props","usePlane","ref","material","THREE","opacity","transparent","receiveShadow","attach","args","Floor","color","Dice","pos","velocity","angle","axis","setInstructionMessage","useBox","mass","position","x","y","z","angularVelocity","rotation","api","loader","materials","map","load","useEffect","subscribe","v","Math","abs","castShadow","App","physicsMaterial","CANNON","physicsContactMaterial","useState","instructionMessage","diceState","setDiceState","makeRandomVector","vector","randAngle","random","PI","vec","cos","sin","getMousePos","ev","touches","changedTouches","clientX","clientY","handleMouseDown","e","mouseTime","Date","getTime","mouseStart","handleMouseUp","m","out","undefined","distance","sqrt","magnitude","velVec","a","makeDiceProperties","shadowMap","camera","onTouchEnd","onTouchStart","onPointerUp","onPointerDown","intensity","penumbra","shadow-mapSize-width","shadow-mapSize-height","gravity","defaultContactMaterial","step","iterations","className","style","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5f297c9.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React, { useState, useEffect } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Physics, usePlane, useBox } from \"use-cannon\";\nimport * as CANNON from \"cannon\";\n\nimport \"./App.css\";\n\nconst diceProperty = {}; //global variable improper but works\nfunction BoundPlanes({ ...props }) {\n  const [ref] = usePlane(() => ({ ...props }));\n  const material = new THREE.MeshPhongMaterial({\n    opacity: 0, // change to one for visible plane\n    transparent: true,\n  });\n  return (\n    <mesh ref={ref} receiveShadow material={material}>\n      <planeBufferGeometry attach=\"geometry\" args={[120, 120]} />\n    </mesh>\n  );\n}\n\nfunction Floor(props) {\n  const [ref] = usePlane(() => ({ ...props }));\n\n  return (\n    <mesh ref={ref} receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n      <meshPhongMaterial\n        attach=\"material\"\n        color={0x65ff05} //complementary  with red?\n      />\n    </mesh>\n  );\n}\n\nfunction Dice({ pos, velocity, angle, axis, setInstructionMessage }) {\n  const [ref, api] = useBox(() => ({\n    mass: 30,\n    args: [10, 10, 10],\n    position: [pos.x, pos.y, pos.z],\n    angularVelocity: [angle.x, angle.y, angle.z],\n    velocity: [velocity.x, velocity.y, velocity.z],\n    rotation: [axis.x, axis.y, axis.z],\n  }));\n  const loader = new THREE.TextureLoader();\n  //load dice face images\n  const materials = [\n    new THREE.MeshBasicMaterial({\n      map: loader.load(\"images/120px-Dicey-1x.png\"),\n    }),\n    new THREE.MeshBasicMaterial({\n      map: loader.load(\"images/120px-Dicey-6x.png\"),\n    }),\n    new THREE.MeshBasicMaterial({\n      map: loader.load(\"images/120px-Dicey-3x.png\"),\n    }),\n    new THREE.MeshBasicMaterial({\n      map: loader.load(\"images/120px-Dicey-4x.png\"),\n    }),\n    new THREE.MeshBasicMaterial({\n      map: loader.load(\"images/120px-Dicey-5x.png\"),\n    }),\n    new THREE.MeshBasicMaterial({\n      map: loader.load(\"images/120px-Dicey-2x.png\"),\n    }),\n  ];\n  useEffect(\n    () =>\n      api.velocity.subscribe((v) =>\n        Math.abs(v[0]) < 0.01 && Math.abs(v[1]) < 0.01 && Math.abs(v[2]) < 0.01\n          ? setInstructionMessage(true)\n          : setInstructionMessage(false)\n      ),\n    [api.velocity, setInstructionMessage, velocity]\n  );\n\n  return (\n    <mesh ref={ref} material={materials} castShadow>\n      <boxGeometry args={[10, 10, 10]} attach=\"geometry\" receiveShadow />\n    </mesh>\n  );\n}\n\nfunction App() {\n  const physicsMaterial = new CANNON.Material();\n  const physicsContactMaterial = new CANNON.ContactMaterial(\n    physicsMaterial,\n    physicsMaterial,\n    0.0, // friction\n    0.01 // restitution\n  );\n  const [instructionMessage, setInstructionMessage] = useState(true);\n  const [diceState, setDiceState] = useState(true);\n\n  function makeRandomVector(vector) {\n    const randAngle = (Math.random() * Math.PI) / 5 - Math.PI / 5 / 2;\n    const vec = {\n      x: vector.x * Math.cos(randAngle) - vector.y * Math.sin(randAngle),\n      y: vector.x * Math.sin(randAngle) + vector.y * Math.cos(randAngle),\n    };\n    if (vec.x === 0) vec.x = 0.01;\n    if (vec.y === 0) vec.y = 0.01;\n    return vec;\n  }\n\n  function makeDiceProperties() {\n    let vector = diceProperty.out;\n    let distance = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    let magnitude = (Math.random() + 3) * distance;\n    let vec = makeRandomVector(vector);\n    let pos = {\n      x: 100 * (vec.x > 0 ? -1 : 1) * 0.9, //change 100\n      y: 100 * (vec.y > 0 ? -1 : 1) * 0.9, //change 100\n      z: Math.random() * 20 + 20,\n    };\n    let velVec = makeRandomVector(vector);\n    let velocity = { x: velVec.x * magnitude, y: velVec.y * magnitude, z: -10 };\n    let inertia = 13;\n    let angle = {\n      x: -(Math.random() * vec.y * 5 + inertia * vec.y),\n      y: Math.random() * vec.x * 5 + inertia * vec.x,\n      z: 0,\n    };\n    let axis = {\n      x: Math.random(),\n      y: Math.random(),\n      z: Math.random(),\n      a: Math.random(),\n    };\n    diceProperty.pos = pos;\n    diceProperty.velocity = velocity;\n    diceProperty.angle = angle;\n    diceProperty.axis = axis;\n  }\n\n  const getMousePos = function (ev) {\n    const touches = ev.changedTouches;\n    if (touches) return { x: touches[0].clientX, y: touches[0].clientY };\n    return { x: ev.clientX, y: ev.clientY };\n  };\n  const handleMouseDown = (e) => {\n    setDiceState(true);\n    diceProperty.mouseTime = new Date().getTime();\n    diceProperty.mouseStart = getMousePos(e);\n  };\n  const handleMouseUp = (e) => {\n    const m = getMousePos(e);\n\n    diceProperty.out = {\n      x: (m.x - diceProperty.mouseStart.x) / 5000,\n      y: -(m.y - diceProperty.mouseStart.y) / 5000,\n    };\n\n    diceProperty.mouseStart = undefined;\n    if (diceProperty.out) {\n      //if mouse drag is detected\n      makeDiceProperties(); //create a dice with properties\n    }\n    setDiceState(false);\n  };\n  return (\n    <>\n      <Canvas\n        shadowMap\n        camera={{ position: [0, -12, 150] }}\n        onTouchEnd={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onPointerUp={handleMouseUp}\n        onPointerDown={handleMouseDown}\n      >\n        <hemisphereLight intensity={0.35} />\n        <spotLight\n          position={[200, 0, 200]}\n          angle={0.3}\n          penumbra={1}\n          intensity={0.5}\n          castShadow\n          shadow-mapSize-width={256}\n          shadow-mapSize-height={256}\n        />\n        <pointLight position={[-30, 0, -30]} intensity={0.5} />\n        <Physics\n          gravity={[0, 0, -9.8 * 3]}\n          defaultContactMaterial={physicsContactMaterial}\n          step={1 / 60}\n          iterations={10}\n        >\n          <Floor />\n          <BoundPlanes position={[-60, 0, 0]} rotation={[0, 1.570796, 0]} />\n          <BoundPlanes position={[60, 0, 0]} rotation={[0, -1.570796, 0]} />\n          <BoundPlanes position={[0, 60, 0]} rotation={[1.570796, 0, 0]} />\n          <BoundPlanes position={[0, -60, 0]} rotation={[-1.570796, 0, 0]} />\n          {!diceState && (\n            <Dice\n              pos={diceProperty.pos}\n              velocity={diceProperty.velocity}\n              angle={diceProperty.angle}\n              axis={diceProperty.axis}\n              setInstructionMessage={setInstructionMessage}\n            />\n          )}\n        </Physics>\n      </Canvas>\n      <div\n        className=\"startup\"\n        style={{ display: instructionMessage ? \"block\" : \"none\" }}\n      >\n        Instruction - drag to throw dice\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}